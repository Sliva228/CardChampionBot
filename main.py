import os
import random
import aiosqlite
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
import asyncio
import re
from datetime import datetime, timedelta
router = Router()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
dp.include_router(router)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    waiting_for_nickname = State()
    waiting_for_report = State()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–¥—É –∫–∞—Ä—Ç —Å –º–∞—Å—Ç—è–º–∏
suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£']
ranks = [
    {'rank': '2', 'value': 2}, {'rank': '3', 'value': 3}, {'rank': '4', 'value': 4},
    {'rank': '5', 'value': 5}, {'rank': '6', 'value': 6}, {'rank': '7', 'value': 7},
    {'rank': '8', 'value': 8}, {'rank': '9', 'value': 9}, {'rank': '10', 'value': 10},
    {'rank': 'J', 'value': 10}, {'rank': 'Q', 'value': 10}, {'rank': 'K', 'value': 10},
    {'rank': 'A', 'value': 11}
]

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã –∫–∞—Ä—Ç
def create_deck():
    deck = [{'rank': rank['rank'], 'value': rank['value'], 'suit': suit} for suit in suits for rank in ranks]
    random.shuffle(deck)
    return deck

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def create_connection():
    return await aiosqlite.connect('bot_database.db')


# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def create_table():
    conn = await create_connection()
    async with conn.cursor() as cursor:
        await cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                username TEXT,
                games INTEGER DEFAULT 0,
                wins INTEGER DEFAULT 0,
                losses INTEGER DEFAULT 0,
                ties INTEGER DEFAULT 0,
                balance INTEGER DEFAULT 1000 -- –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å 1000 –µ–¥–∏–Ω–∏—Ü
            )
        ''')
        await conn.commit()

create_table()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_stats(user_id):
    conn = await create_connection()
    async with conn.cursor() as cursor:
        await cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
        row = await cursor.fetchone()
        if row:
            return {
                'games': row[2],
                'wins': row[3],
                'losses': row[4],
                'ties': row[5],
                'username': row[1],
                'balance': row[6]  # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            }
    return {'games': 0, 'wins': 0, 'losses': 0, 'ties': 0, 'username': None, 'balance': 1000}


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def save_user_stats(user_id, stats):
    conn = await create_connection()
    async with conn.cursor() as cursor:
        await cursor.execute('''
            INSERT INTO users (id, username, games, wins, losses, ties, balance)
            VALUES (?, ?, ?, ?, ?, ?, ?)
            ON CONFLICT(id) DO UPDATE SET
                username = excluded.username,
                games = excluded.games,
                wins = excluded.wins,
                losses = excluded.losses,
                ties = excluded.ties,
                balance = excluded.balance
        ''', (user_id, stats['username'], stats['games'], stats['wins'], stats['losses'], stats['ties'], stats['balance']))
        await conn.commit()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    buttons = [
        [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
         InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="play")],
        [InlineKeyboardButton(text="üèÜ –¢–æ–ø", callback_data="top"),
         InlineKeyboardButton(text="üìï –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã", callback_data="rules")],
        [InlineKeyboardButton(text="‚úç  –°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ", callback_data="report")]  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –ú–µ–Ω—é –∏–≥—Ä—ã
def blackjack_menu():
    buttons = [
        [InlineKeyboardButton(text="–í–∑—è—Ç—å –∫–∞—Ä—Ç—É", callback_data="hit"),
         InlineKeyboardButton(text="–û—Å—Ç–∞—Ç—å—Å—è", callback_data="stand")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç
def display_hand(hand, reveal=False):
    if reveal:
        return " ".join([f"{card['rank']}{card['suit']}" for card in hand])
    else:
        return f"{hand[0]['rank']}{hand[0]['suit']} ?"

# –ü–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤
def calculate_score(hand):
    score = sum(card['value'] for card in hand)
    aces = sum(1 for card in hand if card['rank'] == 'A')
    while score > 21 and aces:
        score -= 10
        aces -= 1
    return score

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
def profile_text(user_nickname, stats):
    return (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"–ù–∏–∫–Ω–µ–π–º: {user_nickname}\n"
        f"–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {stats['games']}\n"
        f"–ü–æ–±–µ–¥: {stats['wins']}\n"
        f"–ü–æ—Ä–∞–∂–µ–Ω–∏–π: {stats['losses']}\n"
        f"–ù–∏—á—å–∏—Ö: {stats['ties']}\n"
    )

def top_text():
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT username, games, wins FROM users WHERE username IS NOT NULL AND username != "None" ORDER BY wins DESC LIMIT 50')
    rows = cursor.fetchall()
    conn.close()

    top_list = "\n".join(
        [f"{idx + 1}. {row[0]} - –ò–≥—Ä: {row[1]}, –ü–æ–±–µ–¥: {row[2]}, G/W: {row[2] / row[1] if row[1] > 0 else 0:.2f}" for idx, row in enumerate(rows)]
    )
    return f"üèÜ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:\n\n{top_list}"

def rules_text():
    return (
        "üìï –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã Blackjack:\n\n"
        "1. –¶–µ–ª—å –∏–≥—Ä—ã ‚Äî –Ω–∞–±—Ä–∞—Ç—å —Å—É–º–º—É –∫–∞—Ä—Ç –±–ª–∏–∑–∫—É—é –∫ 21, –Ω–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â—É—é –µ—ë.\n"
        "2. –ö–∞—Ä—Ç—ã —Å —á–∏—Å–ª–æ–º –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç —Å–≤–æ—é –Ω–æ–º–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å, –∫–∞—Ä—Ç—ã —Å –ª–∏—Ü–∞–º–∏ (J, Q, K) –æ—Ü–µ–Ω–∏–≤–∞—é—Ç—Å—è –≤ 10 –æ—á–∫–æ–≤, —Ç—É–∑ ‚Äî –≤ 11 –æ—á–∫–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–µ–±–æ—Ä.\n"
        "3. –ò–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –≤–∑—è—Ç—å –∫–∞—Ä—Ç—É –∏–ª–∏ –æ—Å—Ç–∞—Ç—å—Å—è. –ï—Å–ª–∏ —Å—É–º–º–∞ –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 21, –æ–Ω –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç.\n"
        "4. –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è, –¥–∏–ª–µ—Ä –¥–æ–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—ã –¥–æ 17 –∏ –±–æ–ª—å—à–µ. –ï—Å–ª–∏ —É –¥–∏–ª–µ—Ä–∞ —Å—É–º–º–∞ –∫–∞—Ä—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç 21, –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç.\n"
        "5. –ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –Ω–∞–±—Ä–∞–ª —Å—É–º–º—É –∫–∞—Ä—Ç –±–ª–∏–∂–µ –∫ 21, —á–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫."
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å–ø–∞–º
def is_spam(text):
    # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–∞–º–∞
    if len(text) > 2000:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        return True
    if len(set(text)) / len(text) > 0.8:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
        return True
    return False

@router.message(F.text)
async def handle_message(message: Message):
    if is_spam(message.text):
        try:
            await message.delete()
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∞–º –∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ‚ùó.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É Blackjack! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=main_menu())

@dp.callback_query(lambda call: call.data == "report")
async def report_handler(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ—ë –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    await state.set_state(Form.waiting_for_report)

@dp.message(Form.waiting_for_report)
async def process_report(message: Message, state: FSMContext):
    report_text = message.text.strip()

    if not report_text:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º‚ùó. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await bot.send_message(ADMIN_ID, f"‚ùó–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {message.from_user.id}):\n\n{report_text}")

    await message.answer("–í–∞—à –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å!")
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query(lambda call: call.data in ["profile", "play", "top", "rules", "hit", "stand"])
async def callback_handler(call: types.CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    data = await state.get_data()
    deck = data.get("deck", create_deck())
    user_hand = data.get("user_hand", [])
    dealer_hand = data.get("dealer_hand", [])
    stats = get_user_stats(user_id)
    user_nickname = stats.get('username')

    message_text = ""
    reply_markup = None

    if call.data == "profile":
        if user_nickname is None:
            message_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ –¢–æ–ø."
            await call.message.answer(message_text)
            await state.set_state(Form.waiting_for_nickname)
            return

        new_message_text = profile_text(user_nickname, stats)
        new_reply_markup = main_menu()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if (call.message.text != new_message_text) or (call.message.reply_markup != new_reply_markup):
            try:
                await call.message.edit_text(new_message_text, reply_markup=new_reply_markup)
            except Exception as e:
                print(f"Error editing message: {e}")

    elif call.data == "play":
        # –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã, —Ä–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç
        user_hand = [deck.pop(), deck.pop()]
        dealer_hand = [deck.pop(), deck.pop()]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç —É –∏–≥—Ä–æ–∫–∞
        while len(user_hand) == 0 or calculate_score(user_hand) < 1:
            user_hand = [deck.pop(), deck.pop()]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Blackjack (21) –¥–ª—è –∏–≥—Ä–æ–∫–∞
        user_score = calculate_score(user_hand)
        if user_score == 21:
            stats['wins'] += 1
            message_text = (
                f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {display_hand(user_hand, reveal=True)} (–û—á–∫–∏: {user_score})\n"
                f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {display_hand(dealer_hand, reveal=False)}\n"
                f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞–±—Ä–∞–ª–∏ Blackjack –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∏–≥—Ä–∞–ª–∏! +üèÜ"
            )
            reply_markup = main_menu()
            stats['games'] += 1
            save_user_stats(user_id, stats)
            await state.clear()
            try:
                await call.message.edit_text(message_text, reply_markup=reply_markup)
            except Exception as e:
                print(f"Error editing message: {e}")
            return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã
        else:
            message_text = (
                f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {display_hand(user_hand, reveal=True)} (–û—á–∫–∏: {user_score})\n"
                f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {display_hand(dealer_hand, reveal=False)}"
            )
            reply_markup = blackjack_menu()

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
            await state.update_data(deck=deck, user_hand=user_hand, dealer_hand=dealer_hand)

            try:
                await call.message.answer(message_text, reply_markup=reply_markup)
            except Exception as e:
                print(f"Error sending message: {e}")


    elif call.data == "top":
        new_message_text = top_text()
        new_reply_markup = main_menu()
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if (call.message.text != new_message_text) or (call.message.reply_markup != new_reply_markup):
            try:
                await call.message.edit_text(new_message_text, reply_markup=new_reply_markup)
            except Exception as e:
                print(f"Error editing message: {e}")

    elif call.data == "rules":
        new_message_text = rules_text()
        new_reply_markup = main_menu()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if (call.message.text != new_message_text) or (call.message.reply_markup != new_reply_markup):
            try:
                await call.message.edit_text(new_message_text, reply_markup=new_reply_markup)
            except Exception as e:
                print(f"Error editing message: {e}")

    elif call.data == "hit":
        # –ò–≥—Ä–æ–∫ –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—É
        user_hand.append(deck.pop())
        user_score = calculate_score(user_hand)

        if user_score > 21:
            stats['losses'] += 1
            save_user_stats(user_id, stats)
            message_text = (
                f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {display_hand(user_hand, reveal=True)} (–û—á–∫–∏: {user_score})\n"
                f"–í—ã –ø–µ—Ä–µ–±—Ä–∞–ª–∏. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"
            )
            reply_markup = main_menu()
        else:
            message_text = (
                f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {display_hand(user_hand, reveal=True)} (–û—á–∫–∏: {user_score})\n"
                f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {display_hand(dealer_hand, reveal=False)}"
            )
            reply_markup = blackjack_menu()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        await state.update_data(deck=deck, user_hand=user_hand, dealer_hand=dealer_hand)

        try:
            await call.message.edit_text(message_text, reply_markup=reply_markup)
        except Exception as e:
            print(f"Error editing message: {e}")

    elif call.data == "stand":
        # –ò–≥—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É, –¥–∏–ª–µ—Ä –∏–≥—Ä–∞–µ—Ç
        dealer_score = calculate_score(dealer_hand)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

        while dealer_score < 17:
            dealer_hand.append(deck.pop())
            dealer_score = calculate_score(dealer_hand)

        user_score = calculate_score(user_hand)
        message_text = (
            f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {display_hand(user_hand, reveal=True)} (–û—á–∫–∏: {user_score})\n"
            f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {display_hand(dealer_hand, reveal=True)} (–û—á–∫–∏: {dealer_score})\n"
        )

        if dealer_score > 21 or user_score > dealer_score:
            stats['wins'] += 1
            message_text += "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! +üèÜ"
        elif user_score < dealer_score:
            stats['losses'] += 1
            message_text += "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"
        else:
            stats['ties'] += 1
            message_text += "–ù–∏—á—å—è!"

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        stats['games'] += 1
        save_user_stats(user_id, stats)
        reply_markup = main_menu()

        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        await state.clear()

        try:
            await call.message.edit_text(message_text, reply_markup=reply_markup)
        except Exception as e:
            print(f"Error editing message: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∏–∫–Ω–µ–π–º–∞
@dp.message(Form.waiting_for_nickname)
async def process_nickname(message: Message, state: FSMContext):
    user_id = message.from_user.id
    nickname = message.text.strip()

    if not nickname:
        await message.answer("–ù–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∏–∫–Ω–µ–π–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    stats = get_user_stats(user_id)
    stats['username'] = nickname
    save_user_stats(user_id, stats)

    await message.answer(f"–í–∞—à –Ω–∏–∫–Ω–µ–π–º '{nickname}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
